import { Component, EventEmitter, Input, Output } from '@angular/core';
import { StarRating } from '../../services/star-rating';
import { StarRatingUtils } from '../../services/star-rating.utils';
import * as i0 from "@angular/core";
import * as i1 from "../../services/star-rating-config.service";
import * as i2 from "@angular/common";
export class StarRatingComponent extends StarRating {
    getHalfStarVisible = (rating) => false;
    // @ts-ignore
    getColor;
    starClickChange = new EventEmitter();
    ratingChange = new EventEmitter();
    hoverRatingChange = new EventEmitter();
    saveOnClick($event) {
        if (this.starClickChange) {
            this.starClickChange.emit($event);
        }
    }
    saveOnRatingChange($event) {
        if (this.ratingChange) {
            this.ratingChange.emit($event);
        }
    }
    saveOnHover($event) {
        if (this.hoverRatingChange) {
            this.hoverRatingChange.emit($event);
        }
    }
    /**ACCESSIBILITY **/
    //Keyboard events
    onKeyDown(event) {
        if (!this.interactionPossible()) {
            return;
        }
        const handlers = {
            //Decrement
            Minus: () => this.decrement(),
            ArrowDown: () => this.decrement(),
            ArrowLeft: () => this.decrement(),
            //Increment
            Plus: () => this.increment(),
            ArrowRight: () => this.increment(),
            ArrowUp: () => this.increment(),
            //Reset
            Backspace: () => this.reset(),
            Delete: () => this.reset(),
            Digit0: () => this.reset(),
        };
        const handleDigits = (eventCode) => {
            const dStr = 'Digit';
            const digit = parseInt(eventCode.substr(dStr.length, eventCode.length - 1), 10);
            this.rating = digit;
        };
        if (handlers[event['code']] ||
            StarRatingUtils.isDigitKeyEventCode(event['code'])) {
            if (StarRatingUtils.isDigitKeyEventCode(event['code'])) {
                handleDigits(event['code']);
            }
            else {
                handlers[event['code']]();
            }
            event.preventDefault();
            event.stopPropagation();
        }
    }
    //Hover events
    onStarHover(rating) {
        if (!this.interactionPossible() || !this.hoverEnabled) {
            return;
        }
        this.hoverRating = rating ? parseInt(rating.toString(), 10) : 0;
        //update calculated Color
        this.setColor(true);
        //fire onHoverRatingChange event
        const $event = { hoverRating: this.hoverRating };
        this.saveOnHover($event);
    }
    onStopHover() {
        if (!this.interactionPossible() || !this.hoverEnabled) {
            return;
        }
        this.hoverRating = 0;
        //update calculated Color
        this.setColor();
    }
    constructor(config) {
        super(config);
    }
    //Overrides
    setRating(value) {
        const initValue = this.rating;
        super.setRating(value);
        //if value changed trigger valueAccessor events and outputs
        if (initValue !== this.rating) {
            const $event = { rating: this.rating };
            this.saveOnRatingChange($event);
        }
    }
    /**
     * onStarClicked
     *
     * Is fired when a star is clicked. And updated the rating value.
     * This function returns if the disabled or readOnly
     * property is set. If provided it emits the onClick event
     * handler with the actual rating value.
     *
     * @param rating
     */
    onStarClicked(rating) {
        //fire onClick event
        if (!this.interactionPossible()) {
            return;
        }
        this.rating = rating;
        const onClickEventObject = {
            rating: this.rating,
        };
        this.saveOnClick(onClickEventObject);
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.8", ngImport: i0, type: StarRatingComponent, deps: [{ token: i1.StarRatingConfigService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.8", type: StarRatingComponent, selector: "star-rating", inputs: { getHalfStarVisible: "getHalfStarVisible", getColor: "getColor" }, outputs: { starClickChange: "starClickChange", ratingChange: "ratingChange", hoverRatingChange: "hoverRatingChange" }, usesInheritance: true, ngImport: i0, template: "<div id=\"{{id}}\" class=\"rating {{getComponentClassNames()}}\" tabindex=\"0\"\n  (keydown)=\"onKeyDown($event)\" (mouseleave)=\"onStopHover()\">\n  <div *ngIf=\"labelText\" class=\"label-value\">{{labelText}}</div>\n  <div class=\"star-container\">\n    <div class=\"star\" (mouseenter)=\"onStarHover(star)\"\n      *ngFor=\"let star of stars\" (click)=\"onStarClicked(star)\">\n      <i *ngIf=\"!svgVisible()\" class=\"star-empty {{classEmpty}}\"></i>\n      <i *ngIf=\"!svgVisible()\" class=\"star-half {{classHalf}}\"></i>\n      <i *ngIf=\"!svgVisible()\" class=\"star-filled {{classFilled}}\"></i>\n      <svg *ngIf=\"svgVisible()\" class=\"star-empty\">\n        <use xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n          [attr.xlink:href]=\"pathEmpty\"></use>\n      </svg>\n      <svg *ngIf=\"svgVisible()\" class=\"star-half\">\n        <use xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n          [attr.xlink:href]=\"pathHalf\"></use>\n      </svg>\n      <svg *ngIf=\"svgVisible()\" class=\"star-filled\">\n        <use xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n          [attr.xlink:href]=\"pathFilled\"></use>\n      </svg>\n    </div>\n  </div>\n</div>\n", dependencies: [{ kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.8", ngImport: i0, type: StarRatingComponent, decorators: [{
            type: Component,
            args: [{ selector: 'star-rating', template: "<div id=\"{{id}}\" class=\"rating {{getComponentClassNames()}}\" tabindex=\"0\"\n  (keydown)=\"onKeyDown($event)\" (mouseleave)=\"onStopHover()\">\n  <div *ngIf=\"labelText\" class=\"label-value\">{{labelText}}</div>\n  <div class=\"star-container\">\n    <div class=\"star\" (mouseenter)=\"onStarHover(star)\"\n      *ngFor=\"let star of stars\" (click)=\"onStarClicked(star)\">\n      <i *ngIf=\"!svgVisible()\" class=\"star-empty {{classEmpty}}\"></i>\n      <i *ngIf=\"!svgVisible()\" class=\"star-half {{classHalf}}\"></i>\n      <i *ngIf=\"!svgVisible()\" class=\"star-filled {{classFilled}}\"></i>\n      <svg *ngIf=\"svgVisible()\" class=\"star-empty\">\n        <use xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n          [attr.xlink:href]=\"pathEmpty\"></use>\n      </svg>\n      <svg *ngIf=\"svgVisible()\" class=\"star-half\">\n        <use xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n          [attr.xlink:href]=\"pathHalf\"></use>\n      </svg>\n      <svg *ngIf=\"svgVisible()\" class=\"star-filled\">\n        <use xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n          [attr.xlink:href]=\"pathFilled\"></use>\n      </svg>\n    </div>\n  </div>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i1.StarRatingConfigService }]; }, propDecorators: { getHalfStarVisible: [{
                type: Input
            }], getColor: [{
                type: Input
            }], starClickChange: [{
                type: Output
            }], ratingChange: [{
                type: Output
            }], hoverRatingChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Rhci1yYXRpbmcuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9hbmd1bGFyLXN0YXItcmF0aW5nL3NyYy9saWIvY29tcG9uZW50cy9zdGFyLXJhdGluZy9zdGFyLXJhdGluZy5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL2FuZ3VsYXItc3Rhci1yYXRpbmcvc3JjL2xpYi9jb21wb25lbnRzL3N0YXItcmF0aW5nL3N0YXItcmF0aW5nLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFNdkUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBRXhELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQzs7OztBQU1uRSxNQUFNLE9BQU8sbUJBQW9CLFNBQVEsVUFBVTtJQUVqRCxrQkFBa0IsR0FBZ0MsQ0FBQyxNQUFjLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQztJQUU1RSxhQUFhO0lBQ0osUUFBUSxDQUlJO0lBR3JCLGVBQWUsR0FBNkIsSUFBSSxZQUFZLEVBQWMsQ0FBQztJQUczRSxZQUFZLEdBQW9DLElBQUksWUFBWSxFQUFxQixDQUFDO0lBR3RGLGlCQUFpQixHQUF5QyxJQUFJLFlBQVksRUFBMEIsQ0FBQztJQUVyRyxXQUFXLENBQUMsTUFBa0I7UUFDNUIsSUFBSSxJQUFJLENBQUMsZUFBZSxFQUFFO1lBQ3hCLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ25DO0lBQ0gsQ0FBQztJQUVELGtCQUFrQixDQUFDLE1BQXlCO1FBQzFDLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRTtZQUNyQixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxN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QVE7c0JBQWhCLEtBQUs7Z0JBT04sZUFBZTtzQkFEZCxNQUFNO2dCQUlQLFlBQVk7c0JBRFgsTUFBTTtnQkFJUCxpQkFBaUI7c0JBRGhCLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBDbGlja0V2ZW50IH0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcy9jbGljay1ldmVudC5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgSG92ZXJSYXRpbmdDaGFuZ2VFdmVudCB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMvaG92ZXItcmF0aW5nLWNoYW5nZS1ldmVudC5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgUmF0aW5nQ2hhbmdlRXZlbnQgfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzL3JhdGluZy1jaGFuZ2UtZXZlbnQuaW50ZXJmYWNlJztcbmltcG9ydCB7IHN0YXJSYXRpbmdDb2xvciB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMvc3Rhci1yYXRpbmctY29uZmlnLmludGVyZmFjZSc7XG5pbXBvcnQgeyBTdGFyUmF0aW5nIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvc3Rhci1yYXRpbmcnO1xuaW1wb3J0IHsgU3RhclJhdGluZ0NvbmZpZ1NlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9zdGFyLXJhdGluZy1jb25maWcuc2VydmljZSc7XG5pbXBvcnQgeyBTdGFyUmF0aW5nVXRpbHMgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9zdGFyLXJhdGluZy51dGlscyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3N0YXItcmF0aW5nJyxcbiAgdGVtcGxhdGVVcmw6ICdzdGFyLXJhdGluZy5jb21wb25lbnQuaHRtbCcsXG59KVxuZXhwb3J0IGNsYXNzIFN0YXJSYXRpbmdDb21wb25lbnQgZXh0ZW5kcyBTdGFyUmF0aW5nIHtcbiAgQElucHV0KClcbiAgZ2V0SGFsZlN0YXJWaXNpYmxlOiAocmF0aW5nOiBudW1iZXIpID0+IGJvb2xlYW4gPSAocmF0aW5nOiBudW1iZXIpID0+IGZhbHNlO1xuXG4gIC8vIEB0cy1pZ25vcmVcbiAgQElucHV0KCkgZ2V0Q29sb3I6IChcbiAgICByYXRpbmc6IG51bWJlcixcbiAgICBudW1PZlN0YXJzOiBudW1iZXIsXG4gICAgc3RhdGljQ29sb3I/OiBzdGFyUmF0aW5nQ29sb3IgfCB1bmRlZmluZWRcbiAgKSA9PiBzdGFyUmF0aW5nQ29sb3I7XG5cbiAgQE91dHB1dCgpXG4gIHN0YXJDbGlja0NoYW5nZTogRXZlbnRFbWl0dGVyPENsaWNrRXZlbnQ+ID0gbmV3IEV2ZW50RW1pdHRlcjxDbGlja0V2ZW50PigpO1xuXG4gIEBPdXRwdXQoKVxuICByYXRpbmdDaGFuZ2U6IEV2ZW50RW1pdHRlcjxSYXRpbmdDaGFuZ2VFdmVudD4gPSBuZXcgRXZlbnRFbWl0dGVyPFJhdGluZ0NoYW5nZUV2ZW50PigpO1xuXG4gIEBPdXRwdXQoKVxuICBob3ZlclJhdGluZ0NoYW5nZTogRXZlbnRFbWl0dGVyPEhvdmVyUmF0aW5nQ2hhbmdlRXZlbnQ+ID0gbmV3IEV2ZW50RW1pdHRlcjxIb3ZlclJhdGluZ0NoYW5nZUV2ZW50PigpO1xuXG4gIHNhdmVPbkNsaWNrKCRldmVudDogQ2xpY2tFdmVudCkge1xuICAgIGlmICh0aGlzLnN0YXJDbGlja0NoYW5nZSkge1xuICAgICAgdGhpcy5zdGFyQ2xpY2tDaGFuZ2UuZW1pdCgkZXZlbnQpO1xuICAgIH1cbiAgfVxuXG4gIHNhdmVPblJhdGluZ0NoYW5nZSgkZXZlbnQ6IFJhdGluZ0NoYW5nZUV2ZW50KSB7XG4gICAgaWYgKHRoaXMucmF0aW5nQ2hhbmdlKSB7XG4gICAgICB0aGlzLnJhdGluZ0NoYW5nZS5lbWl0KCRldmVudCk7XG4gICAgfVxuICB9XG5cbiAgc2F2ZU9uSG92ZXIoJGV2ZW50OiBIb3ZlclJhdGluZ0NoYW5nZUV2ZW50KSB7XG4gICAgaWYgKHRoaXMuaG92ZXJSYXRpbmdDaGFuZ2UpIHtcbiAgICAgIHRoaXMuaG92ZXJSYXRpbmdDaGFuZ2UuZW1pdCgkZXZlbnQpO1xuICAgIH1cbiAgfVxuXG4gIC8qKkFDQ0VTU0lCSUxJVFkgKiovXG5cbiAgLy9LZXlib2FyZCBldmVudHNcbiAgb25LZXlEb3duKGV2ZW50OiBLZXlib2FyZEV2ZW50KSB7XG4gICAgaWYgKCF0aGlzLmludGVyYWN0aW9uUG9zc2libGUoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGhhbmRsZXJzOiBSZWNvcmQ8c3RyaW5nLCAoKSA9PiB2b2lkPiA9IHtcbiAgICAgIC8vRGVjcmVtZW50XG4gICAgICBNaW51czogKCkgPT4gdGhpcy5kZWNyZW1lbnQoKSxcbiAgICAgIEFycm93RG93bjogKCkgPT4gdGhpcy5kZWNyZW1lbnQoKSxcbiAgICAgIEFycm93TGVmdDogKCkgPT4gdGhpcy5kZWNyZW1lbnQoKSxcblxuICAgICAgLy9JbmNyZW1lbnRcbiAgICAgIFBsdXM6ICgpID0+IHRoaXMuaW5jcmVtZW50KCksXG4gICAgICBBcnJvd1JpZ2h0OiAoKSA9PiB0aGlzLmluY3JlbWVudCgpLFxuICAgICAgQXJyb3dVcDogKCkgPT4gdGhpcy5pbmNyZW1lbnQoKSxcblxuICAgICAgLy9SZXNldFxuICAgICAgQmFja3NwYWNlOiAoKSA9PiB0aGlzLnJlc2V0KCksXG4gICAgICBEZWxldGU6ICgpID0+IHRoaXMucmVzZXQoKSxcbiAgICAgIERpZ2l0MDogKCkgPT4gdGhpcy5yZXNldCgpLFxuICAgIH07XG5cbiAgICBjb25zdCBoYW5kbGVEaWdpdHMgPSAoZXZlbnRDb2RlOiBzdHJpbmcpOiB2b2lkID0+IHtcbiAgICAgIGNvbnN0IGRTdHIgPSAnRGlnaXQnO1xuICAgICAgY29uc3QgZGlnaXQ6IG51bWJlciA9IHBhcnNlSW50KFxuICAgICAgICBldmVudENvZGUuc3Vic3RyKGRTdHIubGVuZ3RoLCBldmVudENvZGUubGVuZ3RoIC0gMSksXG4gICAgICAgIDEwXG4gICAgICApO1xuICAgICAgdGhpcy5yYXRpbmcgPSBkaWdpdDtcbiAgICB9O1xuXG4gICAgaWYgKFxuICAgICAgaGFuZGxlcnNbZXZlbnRbJ2NvZGUnXV0gfHxcbiAgICAgIFN0YXJSYXRpbmdVdGlscy5pc0RpZ2l0S2V5RXZlbnRDb2RlKGV2ZW50Wydjb2RlJ10pXG4gICAgKSB7XG4gICAgICBpZiAoU3RhclJhdGluZ1V0aWxzLmlzRGlnaXRLZXlFdmVudENvZGUoZXZlbnRbJ2NvZGUnXSkpIHtcbiAgICAgICAgaGFuZGxlRGlnaXRzKGV2ZW50Wydjb2RlJ10pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaGFuZGxlcnNbZXZlbnRbJ2NvZGUnXV0oKTtcbiAgICAgIH1cbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB9XG4gIH1cblxuICAvL0hvdmVyIGV2ZW50c1xuICBvblN0YXJIb3ZlcihyYXRpbmc/OiBudW1iZXIpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuaW50ZXJhY3Rpb25Qb3NzaWJsZSgpIHx8ICF0aGlzLmhvdmVyRW5hYmxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuaG92ZXJSYXRpbmcgPSByYXRpbmcgPyBwYXJzZUludChyYXRpbmcudG9TdHJpbmcoKSwgMTApIDogMDtcbiAgICAvL3VwZGF0ZSBjYWxjdWxhdGVkIENvbG9yXG4gICAgdGhpcy5zZXRDb2xvcih0cnVlKTtcblxuICAgIC8vZmlyZSBvbkhvdmVyUmF0aW5nQ2hhbmdlIGV2ZW50XG4gICAgY29uc3QgJGV2ZW50OiBIb3ZlclJhdGluZ0NoYW5nZUV2ZW50ID0geyBob3ZlclJhdGluZzogdGhpcy5ob3ZlclJhdGluZyB9O1xuICAgIHRoaXMuc2F2ZU9uSG92ZXIoJGV2ZW50KTtcbiAgfVxuXG4gIG9uU3RvcEhvdmVyKCkge1xuICAgIGlmICghdGhpcy5pbnRlcmFjdGlvblBvc3NpYmxlKCkgfHwgIXRoaXMuaG92ZXJFbmFibGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5ob3ZlclJhdGluZyA9IDA7XG4gICAgLy91cGRhdGUgY2FsY3VsYXRlZCBDb2xvclxuICAgIHRoaXMuc2V0Q29sb3IoKTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogU3RhclJhdGluZ0NvbmZpZ1NlcnZpY2UpIHtcbiAgICBzdXBlcihjb25maWcpO1xuICB9XG5cbiAgLy9PdmVycmlkZXNcbiAgc2V0UmF0aW5nKHZhbHVlOiBudW1iZXIpOiB2b2lkIHtcbiAgICBjb25zdCBpbml0VmFsdWUgPSB0aGlzLnJhdGluZztcbiAgICBzdXBlci5zZXRSYXRpbmcodmFsdWUpO1xuXG4gICAgLy9pZiB2YWx1ZSBjaGFuZ2VkIHRyaWdnZXIgdmFsdWVBY2Nlc3NvciBldmVudHMgYW5kIG91dHB1dHNcbiAgICBpZiAoaW5pdFZhbHVlICE9PSB0aGlzLnJhdGluZykge1xuICAgICAgY29uc3QgJGV2ZW50OiBSYXRpbmdDaGFuZ2VFdmVudCA9IHsgcmF0aW5nOiB0aGlzLnJhdGluZyB9O1xuICAgICAgdGhpcy5zYXZlT25SYXRpbmdDaGFuZ2UoJGV2ZW50KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogb25TdGFyQ2xpY2tlZFxuICAgKlxuICAgKiBJcyBmaXJlZCB3aGVuIGEgc3RhciBpcyBjbGlja2VkLiBBbmQgdXBkYXRlZCB0aGUgcmF0aW5nIHZhbHVlLlxuICAgKiBUaGlzIGZ1bmN0aW9uIHJldHVybnMgaWYgdGhlIGRpc2FibGVkIG9yIHJlYWRPbmx5XG4gICAqIHByb3BlcnR5IGlzIHNldC4gSWYgcHJvdmlkZWQgaXQgZW1pdHMgdGhlIG9uQ2xpY2sgZXZlbnRcbiAgICogaGFuZGxlciB3aXRoIHRoZSBhY3R1YWwgcmF0aW5nIHZhbHVlLlxuICAgKlxuICAgKiBAcGFyYW0gcmF0aW5nXG4gICAqL1xuICBvblN0YXJDbGlja2VkKHJhdGluZzogbnVtYmVyKTogdm9pZCB7XG4gICAgLy9maXJlIG9uQ2xpY2sgZXZlbnRcbiAgICBpZiAoIXRoaXMuaW50ZXJhY3Rpb25Qb3NzaWJsZSgpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5yYXRpbmcgPSByYXRpbmc7XG5cbiAgICBjb25zdCBvbkNsaWNrRXZlbnRPYmplY3Q6IENsaWNrRXZlbnQgPSB7XG4gICAgICByYXRpbmc6IHRoaXMucmF0aW5nLFxuICAgIH07XG4gICAgdGhpcy5zYXZlT25DbGljayhvbkNsaWNrRXZlbnRPYmplY3QpO1xuICB9XG59XG4iLCI8ZGl2IGlkPVwie3tpZH19XCIgY2xhc3M9XCJyYXRpbmcge3tnZXRDb21wb25lbnRDbGFzc05hbWVzKCl9fVwiIHRhYmluZGV4PVwiMFwiXG4gIChrZXlkb3duKT1cIm9uS2V5RG93bigkZXZlbnQpXCIgKG1vdXNlbGVhdmUpPVwib25TdG9wSG92ZXIoKVwiPlxuICA8ZGl2ICpuZ0lmPVwibGFiZWxUZXh0XCIgY2xhc3M9XCJsYWJlbC12YWx1ZVwiPnt7bGFiZWxUZXh0fX08L2Rpdj5cbiAgPGRpdiBjbGFzcz1cInN0YXItY29udGFpbmVyXCI+XG4gICAgPGRpdiBjbGFzcz1cInN0YXJcIiAobW91c2VlbnRlcik9XCJvblN0YXJIb3ZlcihzdGFyKVwiXG4gICAgICAqbmdGb3I9XCJsZXQgc3RhciBvZiBzdGFyc1wiIChjbGljayk9XCJvblN0YXJDbGlja2VkKHN0YXIpXCI+XG4gICAgICA8aSAqbmdJZj1cIiFzdmdWaXNpYmxlKClcIiBjbGFzcz1cInN0YXItZW1wdHkge3tjbGFzc0VtcHR5fX1cIj48L2k+XG4gICAgICA8aSAqbmdJZj1cIiFzdmdWaXNpYmxlKClcIiBjbGFzcz1cInN0YXItaGFsZiB7e2NsYXNzSGFsZn19XCI+PC9pPlxuICAgICAgPGkgKm5nSWY9XCIhc3ZnVmlzaWJsZSgpXCIgY2xhc3M9XCJzdGFyLWZpbGxlZCB7e2NsYXNzRmlsbGVkfX1cIj48L2k+XG4gICAgICA8c3ZnICpuZ0lmPVwic3ZnVmlzaWJsZSgpXCIgY2xhc3M9XCJzdGFyLWVtcHR5XCI+XG4gICAgICAgIDx1c2UgeG1sbnM6eGxpbms9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCJcbiAgICAgICAgICBbYXR0ci54bGluazpocmVmXT1cInBhdGhFbXB0eVwiPjwvdXNlPlxuICAgICAgPC9zdmc+XG4gICAgICA8c3ZnICpuZ0lmPVwic3ZnVmlzaWJsZSgpXCIgY2xhc3M9XCJzdGFyLWhhbGZcIj5cbiAgICAgICAgPHVzZSB4bWxuczp4bGluaz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIlxuICAgICAgICAgIFthdHRyLnhsaW5rOmhyZWZdPVwicGF0aEhhbGZcIj48L3VzZT5cbiAgICAgIDwvc3ZnPlxuICAgICAgPHN2ZyAqbmdJZj1cInN2Z1Zpc2libGUoKVwiIGNsYXNzPVwic3Rhci1maWxsZWRcIj5cbiAgICAgICAgPHVzZSB4bWxuczp4bGluaz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIlxuICAgICAgICAgIFthdHRyLnhsaW5rOmhyZWZdPVwicGF0aEZpbGxlZFwiPjwvdXNlPlxuICAgICAgPC9zdmc+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC9kaXY+XG4iXX0=